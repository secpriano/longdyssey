@model LongdysseyWebApplication.Models.FlightSearchViewModel

@{
    ViewData["Title"] = "Solar system";
}
<head>
    <link rel="stylesheet" href="~/css/flights.css" asp-append-version="true" />
</head>
    <div class="UI">
        <section class="searchFlight">
            @using (Html.BeginForm("Index", "Flight", FormMethod.Post))
            {
                <label>Depart from</label>
                <input type="search" value="" list="aod" placeholder="Earth | EAUSNY" asp-for="OriginAOandSpaceportName" autocomplete="off" />
                <datalist id="aod">
                    @foreach (var spaceport in Model.Spaceports)
                    {
                        <option value="@spaceport.AstronomicalObject.Name | @spaceport.Name">@spaceport.AstronomicalObject.Name | @spaceport.Name</option>
                    }
                </datalist>

                <label>Arrive on</label>
                <input type="search" value="" list="aoa" placeholder="Jupiter | JUFRPA" asp-for="DestinationAOandSpaceportName" autocomplete="off" />
                <datalist id="aoa">
                    @foreach (var spaceport in Model.Spaceports)
                    {
                        <option value="@spaceport.AstronomicalObject.Name | @spaceport.Name">@spaceport.AstronomicalObject.Name | @spaceport.Name</option>
                    }
                </datalist>

                <label>Leaving date</label>
                <input type="date" asp-for="LeaveDate"/>

                <label>Flying with</label>
                <input type="number" value="1" min="1" max="10" asp-for="Travelers"/>
                <p>Passenger</p>

                <button class="select" type="submit">Find flights</button>
            }
        </section>

        <h1>Solar system</h1>
    </div>
    <section id="bg"></section>
    <section id="solarSystem">
        @for (var i = 0; i < Model.AstronomicalObjects.Count; i++)
        {
            <div class="@Model.AstronomicalObjects[i].Name">
                <div class="pointOfInterest" style="left: calc(50% + @Model.AstronomicalObjectX[i]px); top: calc(50% + @Model.AstronomicalObjectY[i]px);">
                    <p class="text">@Model.AstronomicalObjects[i].Name</p>
                </div>
                <div class="orbit" style="width: @Model.AstronomicalObjectRadius[i]px; height: @Model.AstronomicalObjectRadius[i]px;"></div>
            </div>
        }
        <div class="zoom">
            <button onclick="ZoomOut()">
                -
            </button>
            <button onclick="ZoomIn()">
                +
            </button>
        </div>
    </section>
    <section class="flights">
        @switch (Model.Flights.Count)
        {
            case 0:
                break;
            case 1:
                <h2>Flight</h2>
                break;
            default:
                <h2>Flights</h2>
                break;
        }
        @foreach (var flight in Model.Flights)
        {
            <div class="flight" onclick="location.href='@Url.Action("Detail", "Flight", new{flight.Id})'">
                <div>
                    <div>
                        <span>From:</span>
                        <span class="label">@flight.OriginGate.Spaceport.AstronomicalObject.Name</span>
                    </div>
                    <div>
                        <span>To:</span>
                        <span class="label">@flight.DestinationGate.Spaceport.AstronomicalObject.Name</span>
                    </div>
                </div>
                <div>
                    <div>
                        <span>From spaceport:</span>
                        <span class="label">@flight.OriginGate.Spaceport.Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    </div>
                    <div>
                        <span>To spaceport:</span>
                        <span class="label">@flight.DestinationGate.Spaceport.Name</span>
                    </div>
                </div>
                <div>
                    <div>
                        <span>Departure gate:</span>
                        <span class="label">@flight.OriginGate.Name</span>
                    </div>
                    <div>
                        <span>Arrival gate:</span>
                        <span class="label">@flight.DestinationGate.Name</span>
                    </div>
                </div>
                <br>
                <div>
                    <span>Spaceship:</span>
                    <span class="label">@flight.Spaceship.Name</span>
                </div>
                <div>
                    <span>Departure Date & Time:</span>
                    <span class="label">@flight.DepartureTime</span>
                </div>
                <div>
                    <span>Flight time:</span>
                    <span class="label">@flight.GetFlightDuration()</span>
                </div>
                <div>
                    <span>Arrival Date & Time:</span>
                    <span class="label">@flight.CalculateArrivalDateTime()</span>
                </div>
            </div>
        }
    </section>

    <script>
        let date = new Date().toJSON();
        let currentDate = new Date().toJSON().slice(0, 10);

        const dateControl = document.querySelector('input[type="date"]');

        dateControl.setAttribute("min", currentDate);
        dateControl.value = currentDate;
        dateControl.setAttribute("placeholder", currentDate);

        const astronomicalObjectsX = @Html.Raw(Json.Serialize(Model.AstronomicalObjectX));
        const astronomicalObjectsY = @Html.Raw(Json.Serialize(Model.AstronomicalObjectY));
        const PointOfInterestRadius = @Html.Raw(Json.Serialize(Model.AstronomicalObjectRadius));

        const orbits = document.getElementsByClassName('orbit');
        const POIs = document.getElementsByClassName('pointOfInterest');

        let zoomStrength = 1.2;

        function ZoomIn() {
            for (let i = 0; i < POIs.length; i++) {
                ZoomInPOI(i);
            }
        }
        function ZoomOut() {
            for (let i = 0; i < POIs.length; i++) {
                ZoomOutPOI(i);
            }
        }

        function ZoomInPOI(i) {

            astronomicalObjectsX[i] *= zoomStrength;
            astronomicalObjectsY[i] *= zoomStrength;

            ApplyZoom(i);
        }

        function ZoomOutPOI(i) {

            astronomicalObjectsX[i] /= zoomStrength;
            astronomicalObjectsY[i] /= zoomStrength;

            ApplyZoom(i);
        }

        function ApplyZoom(i) {

            ZoomPOI(i);
            ZoomOrbit(i);
        }

        function ZoomPOI(i) {

            POIs[i].style.left = "calc(50% + " + astronomicalObjectsX[i] + "px)";
            POIs[i].style.top = "calc(50% + " + astronomicalObjectsY[i] + "px)";
        }

        function ZoomOrbit(i) {

            let d = GetDiameterFromPOI(astronomicalObjectsX[i], astronomicalObjectsY[i]);
            orbits[i].style.width = d + "px";
            orbits[i].style.height = d + "px";
        }

        function GetDiameterFromPOI(x, y) {
            let radius = Math.sqrt(Math.pow(0 - x, 2) + Math.pow(0 - y, 2));
            let diameter = radius * 2;

            return diameter;
        }

    </script>
